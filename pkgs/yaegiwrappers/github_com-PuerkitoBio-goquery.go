// Code generated by 'yaegi extract github.com/PuerkitoBio/goquery'. DO NOT EDIT.

// MIT License
//
// Copyright (c) 2020 - 2023 Jan-Lukas Else
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package yaegiwrappers

import (
	"github.com/PuerkitoBio/goquery"
	"golang.org/x/net/html"
	"reflect"
)

func init() {
	Symbols["github.com/PuerkitoBio/goquery/goquery"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CloneDocument":           reflect.ValueOf(goquery.CloneDocument),
		"NewDocument":             reflect.ValueOf(goquery.NewDocument),
		"NewDocumentFromNode":     reflect.ValueOf(goquery.NewDocumentFromNode),
		"NewDocumentFromReader":   reflect.ValueOf(goquery.NewDocumentFromReader),
		"NewDocumentFromResponse": reflect.ValueOf(goquery.NewDocumentFromResponse),
		"NodeName":                reflect.ValueOf(goquery.NodeName),
		"OuterHtml":               reflect.ValueOf(goquery.OuterHtml),
		"Render":                  reflect.ValueOf(goquery.Render),
		"Single":                  reflect.ValueOf(goquery.Single),
		"SingleMatcher":           reflect.ValueOf(goquery.SingleMatcher),
		"ToEnd":                   reflect.ValueOf(goquery.ToEnd),

		// type definitions
		"Document":  reflect.ValueOf((*goquery.Document)(nil)),
		"Matcher":   reflect.ValueOf((*goquery.Matcher)(nil)),
		"Selection": reflect.ValueOf((*goquery.Selection)(nil)),

		// interface wrapper definitions
		"_Matcher": reflect.ValueOf((*_github_com_PuerkitoBio_goquery_Matcher)(nil)),
	}
}

// _github_com_PuerkitoBio_goquery_Matcher is an interface wrapper for Matcher type
type _github_com_PuerkitoBio_goquery_Matcher struct {
	IValue    interface{}
	WFilter   func(a0 []*html.Node) []*html.Node
	WMatch    func(a0 *html.Node) bool
	WMatchAll func(a0 *html.Node) []*html.Node
}

func (W _github_com_PuerkitoBio_goquery_Matcher) Filter(a0 []*html.Node) []*html.Node {
	return W.WFilter(a0)
}
func (W _github_com_PuerkitoBio_goquery_Matcher) Match(a0 *html.Node) bool {
	return W.WMatch(a0)
}
func (W _github_com_PuerkitoBio_goquery_Matcher) MatchAll(a0 *html.Node) []*html.Node {
	return W.WMatchAll(a0)
}
